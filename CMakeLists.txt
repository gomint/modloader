cmake_minimum_required(VERSION 3.13)
project(ModLoader VERSION 0.1.0)

# Global Settings
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 99)

set(MODLOADER_BEDROCK_PDB "${PROJECT_SOURCE_DIR}/symbols/bedrock_server.pdb" CACHE FILEPATH "Please specify the path to your bedrock_server.pdb file")

#
# SymExtract Configuration
#
macro(configure_symextract)
    add_executable(SymExtract)
    target_include_directories(SymExtract PUBLIC include)

    add_subdirectory(extern/json)
    add_subdirectory(extern/cxxopts)
    target_link_libraries(SymExtract PRIVATE cxxopts)
    target_link_libraries(SymExtract PRIVATE nlohmann_json::nlohmann_json)

    add_subdirectory(include/SymExtract)
    add_subdirectory(src/SymExtract)
endmacro()

if (EARLY_BUILD)
    configure_symextract()
    return()
endif()

#
# Run SymExtract Compilation at configuration stage
#

# Setup folder for host architecture, if required (cross-compilation)
if (CMAKE_CROSSCOMPILING)
    set(symextract_workdir "${CMAKE_BINARY_DIR}/host/preflight")
else()
    set(symextract_workdir "${CMAKE_BINARY_DIR}/preflight")
endif()

if (WIN32)
    set(symextract_executable "${symextract_workdir}/SymExtract.exe")
    set(symextract_symboltable "${CMAKE_SOURCE_DIR}/symbols/symbolnames_win32.json")
else()
    set(symextract_executable "${symextract_workdir}/SymExtract")
    set(symextract_symboltable "${CMAKE_SOURCE_DIR}/symbols/symbolnames_unix.json")
endif()

set(symextract_command
    "${symextract_executable}"
    --schema "${CMAKE_SOURCE_DIR}/symbols/schema.json"
    --symbol-names "${symextract_symboltable}"
    --input-file "${MODLOADER_BEDROCK_PDB}"
    --output-directory "${CMAKE_SOURCE_DIR}/symbols/generated"
    --include-prefix SymExtract
)

macro(symextract_generate)
    execute_process(COMMAND ${symextract_command})
endmacro()

# Build SymExtract if not yet built
if (NOT EXISTS "${symextract_executable}")
    execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "${symextract_workdir}")

    # Run nested CMake process (configuration)
    execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
                            -DCMAKE_BUILD_TYPE=Release
                            -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}
                            -DEARLY_BUILD=ON
                            ${CMAKE_SOURCE_DIR}
                    WORKING_DIRECTORY "${symextract_workdir}")

    # Run nested CMake process (build)
    execute_process(COMMAND ${CMAKE_COMMAND} --build . --target SymExtract WORKING_DIRECTORY "${symextract_workdir}")

    # Force generate symbols
    symextract_generate()
endif()

#
# Generating Symbol files
#

# Configure SymExtract only afterwards
configure_symextract()

#
# Target Declarations
#
add_library(ModLoader SHARED)
add_custom_target(SymbolGeneration COMMAND ${symextract_command})

if (WIN32)
    add_executable(PreLoader)
endif ()

target_include_directories(ModLoader PUBLIC include)

#
# External Libraries
#
set(JSON_BuildTests OFF CACHE INTERNAL "")

add_subdirectory(extern/funchook)

target_link_libraries(ModLoader PRIVATE funchook-static)

#
# Source Tree
#
add_subdirectory(include/Minecraft)
add_subdirectory(include/ModLoader)
add_subdirectory(src/ModLoader)

if (WIN32)
    add_subdirectory(src/Preloader)
endif ()


# Import files generated by SymExtract
file(GLOB_RECURSE symextract_generated_files ${CMAKE_SOURCE_DIR}/symbols/generated/*)
target_include_directories(ModLoader PRIVATE ${CMAKE_SOURCE_DIR}/symbols/generated/include)
target_sources(ModLoader PRIVATE ${symextract_generated_files})


#
# Installation
#
install(TARGETS ModLoader EXPORT ModLoaderTargets
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
    )