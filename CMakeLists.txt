cmake_minimum_required(VERSION 3.13)
project(ModLoader VERSION 0.1.0)

# Global Settings
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 99)

option(MODLOADER_BUILD_EXAMPLES "Whether or not to build examples" OFF)
set(MODLOADER_BEDROCK_PDB "${PROJECT_SOURCE_DIR}/symbols/bedrock_server.pdb" CACHE FILEPATH "Please specify the path to your bedrock_server.pdb file")

set(generated_dir "${CMAKE_CURRENT_BINARY_DIR}/generated")

#
# SymExtract Configuration
#
macro(configure_symextract)
    add_executable(SymExtract)
    target_include_directories(
        SymExtract PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>
        $<INSTALL_INTERFACE:include>
    )

    set(JSON_BuildTests OFF CACHE INTERNAL "")

    add_subdirectory(extern/json)
    add_subdirectory(extern/cxxopts)
    target_link_libraries(SymExtract PRIVATE cxxopts)
    target_link_libraries(SymExtract PRIVATE nlohmann_json::nlohmann_json)

    add_subdirectory(include/SymExtract)
    add_subdirectory(src/SymExtract)
endmacro()

if (EARLY_BUILD)
    configure_symextract()
    return()
endif()

#
# Run SymExtract Compilation at configuration stage
#

# Setup folder for host architecture, if required (cross-compilation)
if (CMAKE_CROSSCOMPILING)
    set(symextract_workdir "${CMAKE_BINARY_DIR}/host/preflight")
else()
    set(symextract_workdir "${CMAKE_BINARY_DIR}/preflight")
endif()

if (WIN32)
    set(symextract_executable "${symextract_workdir}/SymExtract.exe")
    set(symextract_symboltable "${CMAKE_SOURCE_DIR}/symbols/symbolnames_win32.json")
else()
    set(symextract_executable "${symextract_workdir}/SymExtract")
    set(symextract_symboltable "${CMAKE_SOURCE_DIR}/symbols/symbolnames_unix.json")
endif()

set(symextract_command
    "${symextract_executable}"
    --schema "${CMAKE_SOURCE_DIR}/symbols/schema.json"
    --symbol-names "${symextract_symboltable}"
    --input-file "${MODLOADER_BEDROCK_PDB}"
    --output-directory "${generated_dir}"
    --include-prefix SymExtract
)

macro(symextract_generate)
    execute_process(COMMAND ${symextract_command})
endmacro()

# Build SymExtract if not yet built
if (NOT EXISTS "${symextract_executable}")
    execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "${symextract_workdir}")

    # Run nested CMake process (configuration)
    execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
                            -DCMAKE_BUILD_TYPE=Release
                            -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}
                            -DEARLY_BUILD=ON
                            ${CMAKE_SOURCE_DIR}
                    WORKING_DIRECTORY "${symextract_workdir}")

    # Run nested CMake process (build)
    execute_process(COMMAND ${CMAKE_COMMAND} --build . --target SymExtract WORKING_DIRECTORY "${symextract_workdir}")

    # Force generate symbols
    symextract_generate()
endif()

#
# Generating Symbol files
#

# Configure SymExtract only afterwards
configure_symextract()

#
# Target Declarations
#
add_library(ModLoader SHARED)
add_custom_target(SymbolGeneration COMMAND ${symextract_command})

if (WIN32)
    add_executable(PreLoader)
endif ()

target_compile_definitions(ModLoader PRIVATE MODLOADER_API_EXPORT)
target_include_directories(
    ModLoader
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

#
# External Libraries
#
add_subdirectory(extern/funchook)
add_subdirectory(extern/spdlog)

target_link_libraries(ModLoader PRIVATE funchook-static spdlog::spdlog)

#
# Source Tree
#
add_subdirectory(include/Minecraft)
add_subdirectory(include/ModLoader)
add_subdirectory(src/ModLoader)

if (WIN32)
    add_subdirectory(src/Preloader)
endif ()

# Configuration file
configure_file(
    include/ModLoader/Config.h.in
    ${generated_dir}/ModLoader/Config.h
    @ONLY
)
target_sources(
    ModLoader
        PUBLIC
            $<BUILD_INTERFACE:${generated_dir}/ModLoader/Config.h>
            $<INSTALL_INTERFACE:include/ModLoader/Config.h>
)
target_include_directories(
    ModLoader
    PRIVATE
        $<BUILD_INTERFACE:${generated_dir}>
        $<INSTALL_INTERFACE:include>
)

# Import files generated by SymExtract
file(GLOB_RECURSE symextract_generated_files ${generated_dir}/*.h ${generated_dir}/*.cpp)
target_include_directories(
    ModLoader
    PRIVATE
        $<BUILD_INTERFACE:${generated_dir}/include>
        $<INSTALL_INTERFACE:include>
)
target_sources(ModLoader PRIVATE ${symextract_generated_files})

# Private sources
target_include_directories(ModLoader PRIVATE src)

#
# Examples
#
if (MODLOADER_BUILD_EXAMPLES)
    add_subdirectory(examples/simplemod)
endif()

#
# Installation
#
include (GNUInstallDirs)
include (CMakePackageConfigHelpers)

# Create Package Metadata
write_basic_package_version_file(
    "${generated_dir}/ModLoaderConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY ExactVersion
)

configure_package_config_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Config.cmake.in"
    "${generated_dir}/ModLoaderConfig.cmake"
    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
)

# Targets
#   * ModLoader - the shared library to link to
install(
    TARGETS ModLoader
    EXPORT ModLoaderTargets
    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
    INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
)

# Headers
#   * ModLoader Headers: include/ModLoader
#   * Config.h: include/ModLoader
install(
    DIRECTORY "include/ModLoader"
    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
    FILES_MATCHING PATTERN "*.h"
)
install(
    FILES "${generated_dir}/ModLoader/Config.h"
    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/ModLoader"
)

# Package Config
#   * <prefix>/lib/cmake/ModLoader/ModLoaderConfig.cmake
#   * <prefix>/lib/cmake/ModLoader/ModLoaderVersionConfig.cmake
#   * Target Exports
install(
    FILES
        "${generated_dir}/ModLoaderConfig.cmake"
        "${generated_dir}/ModLoaderVersionConfig.cmake"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/ModLoader"
)

install(
    EXPORT ModLoaderTargets
    NAMESPACE ModLoader
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/ModLoader"
)